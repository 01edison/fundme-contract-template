{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc4289f6c318cb40200325d80daa28bb2637e484b73daebf57eb85b577213ad32",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1148182",
    "logsBloom": "0x
    "blockHash": "0x5e8ef8740f76540bb54edcc03b23f3192b9f3537ad831e0a41fa2abc93029033",
    "transactionHash": "0xc4289f6c318cb40200325d80daa28bb2637e484b73daebf57eb85b577213ad32",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "1148182",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd70f8278a703cb51e922885ccee2f1d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Edison Mgbeokwere\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"this contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/**\\r\\n * @title A contract for crowd funding\\r\\n * @author Edison Mgbeokwere\\r\\n * @notice this contract is to demo a sample funding contract\\r\\n *\\r\\n */\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n    address[] private s_funders;\\r\\n\\r\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\r\\n    address private immutable i_owner;\\r\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress); // the aggregated price feed contract\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == owner);\\r\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You need to spend more ETH!\\\"\\r\\n        );\\r\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\r\\n        if (s_addressToAmountFunded[msg.sender] == 0) {\\r\\n            s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n            s_funders.push(msg.sender);\\r\\n        } else {\\r\\n            s_addressToAmountFunded[msg.sender] =\\r\\n                s_addressToAmountFunded[msg.sender] +\\r\\n                msg.value;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getVersion() public view returns (uint256) {\\r\\n        //  s_priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\r\\n        return s_priceFeed.version();\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n        // // transfer\\r\\n        // payable(msg.sender).transfer(address(this).balance);\\r\\n        // // send\\r\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\r\\n        // require(sendSuccess, \\\"Send failed\\\");\\r\\n        // call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call failed\\\");\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n\\r\\n        for (\\r\\n            uint funderindex = 0;\\r\\n            funderindex < funders.length;\\r\\n            funderindex++\\r\\n        ) {\\r\\n            address funder = funders[funderindex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n        s_funders = new address[](0);\\r\\n\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        if (!success) revert FundMe__NotOwner(); // temporary \\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getAddressToAmountFunded(address funder)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x09d7682f0baa6626493582fc281c7404b8e3d447397c887b8c6033915c068576\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    // We could make this public, but then we'd have to deploy it\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        // Rinkeby ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData(); //returns the amount raise to the power of 8\\r\\n\\r\\n        return uint256(answer * 10000000000);  //this will tell you how much dollars equals 1 ETH to the power of 18\\r\\n    }\\r\\n\\r\\n    // 1000000000\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);  //return USD equivalent of 1 ETH\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x5f456b99d35fde0a67e0816fd349f8f5f41af833eea1781dc734aff04f3f10d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620014e8380380620014e883398181016040528101906200003791906200011c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e482620000b7565b9050919050565b620000f681620000d7565b81146200010257600080fd5b50565b6000815190506200011681620000eb565b92915050565b600060208284031215620001355762000134620000b2565b5b6000620001458482850162000105565b91505092915050565b6080516113696200017f600039600081816104ed0152818161073d0152818161078c015261098301526113696000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610c74565b6103fc565b6040516100d79190610cba565b60405180910390f35b3480156100ec57600080fd5b506100f5610445565b6040516101029190610cba565b60405180910390f35b6101136104eb565b005b34801561012157600080fd5b5061012a61072c565b6040516101379190610cba565b60405180910390f35b34801561014c57600080fd5b50610155610739565b6040516101629190610ce4565b60405180910390f35b34801561017757600080fd5b50610180610761565b60405161018d9190610d5e565b60405180910390f35b61019e6101e7565b005b6101a861078a565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610da5565b610a46565b6040516101de9190610ce4565b60405180910390f35b6802b5e3af16b188000061022460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a8e90919063ffffffff16565b1015610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025c90610e2f565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561036b5734600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102fc9190610e7e565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103fa565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103b69190610e7e565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ae57600080fd5b505afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190610ee9565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610570576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60028054905081101561061c5760006002828154811061059657610595610f16565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061061490610f45565b915050610573565b50600067ffffffffffffffff81111561063857610637610f8e565b5b6040519080825280602002602001820160405280156106665781602001602082028036833780820191505090505b506002908051906020019061067c929190610b6a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516106a390610fee565b60006040518083038185875af1925050503d80600081146106e0576040519150601f19603f3d011682016040523d82523d6000602084013e6106e5565b606091505b5050905080610729576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107209061104f565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461080f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600280548060200260200160405190810160405280929190818152602001828054801561089357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610849575b5050505050905060005b815181101561091e5760008282815181106108bb576108ba610f16565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061091690610f45565b91505061089d565b50600067ffffffffffffffff81111561093a57610939610f8e565b5b6040519080825280602002602001820160405280156109685781602001602082028036833780820191505090505b506002908051906020019061097e929190610b6a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516109c590610fee565b60006040518083038185875af1925050503d8060008114610a02576040519150601f19603f3d011682016040523d82523d6000602084013e610a07565b606091505b5050905080610a42576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600060028281548110610a5c57610a5b610f16565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a9a83610aca565b90506000670de0b6b3a76400008583610ab3919061106f565b610abd91906110f8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b1357600080fd5b505afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b91906111a1565b5050509150506402540be40081610b62919061121c565b915050919050565b828054828255906000526020600020908101928215610be3579160200282015b82811115610be25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b8a565b5b509050610bf09190610bf4565b5090565b5b80821115610c0d576000816000905550600101610bf5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4182610c16565b9050919050565b610c5181610c36565b8114610c5c57600080fd5b50565b600081359050610c6e81610c48565b92915050565b600060208284031215610c8a57610c89610c11565b5b6000610c9884828501610c5f565b91505092915050565b6000819050919050565b610cb481610ca1565b82525050565b6000602082019050610ccf6000830184610cab565b92915050565b610cde81610c36565b82525050565b6000602082019050610cf96000830184610cd5565b92915050565b6000819050919050565b6000610d24610d1f610d1a84610c16565b610cff565b610c16565b9050919050565b6000610d3682610d09565b9050919050565b6000610d4882610d2b565b9050919050565b610d5881610d3d565b82525050565b6000602082019050610d736000830184610d4f565b92915050565b610d8281610ca1565b8114610d8d57600080fd5b50565b600081359050610d9f81610d79565b92915050565b600060208284031215610dbb57610dba610c11565b5b6000610dc984828501610d90565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e19601b83610dd2565b9150610e2482610de3565b602082019050919050565b60006020820190508181036000830152610e4881610e0c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8982610ca1565b9150610e9483610ca1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ec957610ec8610e4f565b5b828201905092915050565b600081519050610ee381610d79565b92915050565b600060208284031215610eff57610efe610c11565b5b6000610f0d84828501610ed4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610f5082610ca1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f8357610f82610e4f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610fd8600083610fbd565b9150610fe382610fc8565b600082019050919050565b6000610ff982610fcb565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611039600b83610dd2565b915061104482611003565b602082019050919050565b600060208201905081810360008301526110688161102c565b9050919050565b600061107a82610ca1565b915061108583610ca1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110be576110bd610e4f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061110382610ca1565b915061110e83610ca1565b92508261111e5761111d6110c9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61114881611129565b811461115357600080fd5b50565b6000815190506111658161113f565b92915050565b6000819050919050565b61117e8161116b565b811461118957600080fd5b50565b60008151905061119b81611175565b92915050565b600080600080600060a086880312156111bd576111bc610c11565b5b60006111cb88828901611156565b95505060206111dc8882890161118c565b94505060406111ed88828901610ed4565b93505060606111fe88828901610ed4565b925050608061120f88828901611156565b9150509295509295909350565b60006112278261116b565b91506112328361116b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561127157611270610e4f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156112ae576112ad610e4f565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112eb576112ea610e4f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561132857611327610e4f565b5b82820290509291505056fea2646970667358221220918649f939e63d79d44a6605c0f1b03b9bb5b4a91e3dad1778fbdb6651a95ff064736f6c63430008090033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610c74565b6103fc565b6040516100d79190610cba565b60405180910390f35b3480156100ec57600080fd5b506100f5610445565b6040516101029190610cba565b60405180910390f35b6101136104eb565b005b34801561012157600080fd5b5061012a61072c565b6040516101379190610cba565b60405180910390f35b34801561014c57600080fd5b50610155610739565b6040516101629190610ce4565b60405180910390f35b34801561017757600080fd5b50610180610761565b60405161018d9190610d5e565b60405180910390f35b61019e6101e7565b005b6101a861078a565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610da5565b610a46565b6040516101de9190610ce4565b60405180910390f35b6802b5e3af16b188000061022460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610a8e90919063ffffffff16565b1015610265576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025c90610e2f565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561036b5734600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102fc9190610e7e565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103fa565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103b69190610e7e565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156104ae57600080fd5b505afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e69190610ee9565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610570576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60028054905081101561061c5760006002828154811061059657610595610f16565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061061490610f45565b915050610573565b50600067ffffffffffffffff81111561063857610637610f8e565b5b6040519080825280602002602001820160405280156106665781602001602082028036833780820191505090505b506002908051906020019061067c929190610b6a565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516106a390610fee565b60006040518083038185875af1925050503d80600081146106e0576040519150601f19603f3d011682016040523d82523d6000602084013e6106e5565b606091505b5050905080610729576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107209061104f565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461080f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600280548060200260200160405190810160405280929190818152602001828054801561089357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610849575b5050505050905060005b815181101561091e5760008282815181106108bb576108ba610f16565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061091690610f45565b91505061089d565b50600067ffffffffffffffff81111561093a57610939610f8e565b5b6040519080825280602002602001820160405280156109685781602001602082028036833780820191505090505b506002908051906020019061097e929190610b6a565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516109c590610fee565b60006040518083038185875af1925050503d8060008114610a02576040519150601f19603f3d011682016040523d82523d6000602084013e610a07565b606091505b5050905080610a42576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600060028281548110610a5c57610a5b610f16565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a9a83610aca565b90506000670de0b6b3a76400008583610ab3919061106f565b610abd91906110f8565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b1357600080fd5b505afa158015610b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4b91906111a1565b5050509150506402540be40081610b62919061121c565b915050919050565b828054828255906000526020600020908101928215610be3579160200282015b82811115610be25782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b8a565b5b509050610bf09190610bf4565b5090565b5b80821115610c0d576000816000905550600101610bf5565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c4182610c16565b9050919050565b610c5181610c36565b8114610c5c57600080fd5b50565b600081359050610c6e81610c48565b92915050565b600060208284031215610c8a57610c89610c11565b5b6000610c9884828501610c5f565b91505092915050565b6000819050919050565b610cb481610ca1565b82525050565b6000602082019050610ccf6000830184610cab565b92915050565b610cde81610c36565b82525050565b6000602082019050610cf96000830184610cd5565b92915050565b6000819050919050565b6000610d24610d1f610d1a84610c16565b610cff565b610c16565b9050919050565b6000610d3682610d09565b9050919050565b6000610d4882610d2b565b9050919050565b610d5881610d3d565b82525050565b6000602082019050610d736000830184610d4f565b92915050565b610d8281610ca1565b8114610d8d57600080fd5b50565b600081359050610d9f81610d79565b92915050565b600060208284031215610dbb57610dba610c11565b5b6000610dc984828501610d90565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610e19601b83610dd2565b9150610e2482610de3565b602082019050919050565b60006020820190508181036000830152610e4881610e0c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8982610ca1565b9150610e9483610ca1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ec957610ec8610e4f565b5b828201905092915050565b600081519050610ee381610d79565b92915050565b600060208284031215610eff57610efe610c11565b5b6000610f0d84828501610ed4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610f5082610ca1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f8357610f82610e4f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610fd8600083610fbd565b9150610fe382610fc8565b600082019050919050565b6000610ff982610fcb565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611039600b83610dd2565b915061104482611003565b602082019050919050565b600060208201905081810360008301526110688161102c565b9050919050565b600061107a82610ca1565b915061108583610ca1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156110be576110bd610e4f565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061110382610ca1565b915061110e83610ca1565b92508261111e5761111d6110c9565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61114881611129565b811461115357600080fd5b50565b6000815190506111658161113f565b92915050565b6000819050919050565b61117e8161116b565b811461118957600080fd5b50565b60008151905061119b81611175565b92915050565b600080600080600060a086880312156111bd576111bc610c11565b5b60006111cb88828901611156565b95505060206111dc8882890161118c565b94505060406111ed88828901610ed4565b93505060606111fe88828901610ed4565b925050608061120f88828901611156565b9150509295509295909350565b60006112278261116b565b91506112328361116b565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561127157611270610e4f565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156112ae576112ad610e4f565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156112eb576112ea610e4f565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561132857611327610e4f565b5b82820290509291505056fea2646970667358221220918649f939e63d79d44a6605c0f1b03b9bb5b4a91e3dad1778fbdb6651a95ff064736f6c63430008090033",
  "devdoc": {
    "author": "Edison Mgbeokwere",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "this contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 58,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}